{"meta":{"title":"Zane","subtitle":"Zane的肥宅日记","description":"","author":"Zane Chen","url":"https://humbledaddy.github.io","root":"/"},"pages":[{"title":"404","date":"2019-07-19T08:41:10.000Z","updated":"2020-10-21T11:00:42.895Z","comments":true,"path":"404.html","permalink":"https://humbledaddy.github.io/404.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-11-11T07:39:25.135Z","updated":"2020-11-11T07:39:25.135Z","comments":false,"path":"categories/index.html","permalink":"https://humbledaddy.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2020-10-21T11:00:42.897Z","comments":true,"path":"about/index.html","permalink":"https://humbledaddy.github.io/about/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2020-10-21T11:00:42.899Z","comments":true,"path":"friends/index.html","permalink":"https://humbledaddy.github.io/friends/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2020-11-11T07:39:16.621Z","updated":"2020-11-11T07:39:16.621Z","comments":false,"path":"tags/index.html","permalink":"https://humbledaddy.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-10-22T04:04:45.074Z","updated":"2020-10-22T02:07:25.692Z","comments":true,"path":"2020/10/22/hello-world/","link":"","permalink":"https://humbledaddy.github.io/2020/10/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"hsl","slug":"hsl","date":"2020-10-22T02:08:07.000Z","updated":"2020-10-22T02:08:07.389Z","comments":true,"path":"2020/10/22/hsl/","link":"","permalink":"https://humbledaddy.github.io/2020/10/22/hsl/","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"计算机网络-SAP和OSI","slug":"计算机网络-SAP和OSI","date":"2020-10-20T10:16:40.000Z","updated":"2020-10-21T11:00:42.896Z","comments":true,"path":"2020/10/20/ji-suan-ji-wang-luo-sap-he-osi/","link":"","permalink":"https://humbledaddy.github.io/2020/10/20/ji-suan-ji-wang-luo-sap-he-osi/","excerpt":"","text":"OSI 网络体系结构OSIOSI 具有七层协议 （应用层 表示层 会话层 运输层 网络层 数据链路层） TCP/IP 具有四层协议 （应用层 运输层 网络层 网络接口层） 在学习网络体系结构时，折中采用五层协议，也就是把网络接口层拆开为数据链路层和物理层 （具体应用还是四层协议，没有这么麻烦，） 只有物理层的连接才是真连接，其他层的连接都是靠软件实现的逻辑上的连接 ​ 💻- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -💻 SWP(Service Access Point)服务访问点 服务数据单元 SDU（Service Data Unit）。OSI 模型把相邻层实体间传送信息的数据单元称为服务数据单元，并将（N+1）层与（N）层之间传送信息的服务单元记为（N）SDU。（N）服务数据单元实际上是确保（N）服务传输需要的逻辑单元。 协议数据单元 PDU（Protocol Data Unit）。OSI 模型把对等实体间传送信息的数据单元称为协议数据单元，并将（N）层的协议数据单元记为（N）PDU。（N）PDU 由两部分组成，即（N）用户数据［记为（N）UD］和（N）协议控制信息［记为（N）PCI］。如果某层的协议数据单元只用于控制，则该协议数据单元中的用户数据可省略，此时只有该层的 PCI。 接口数据单元 IDU（Interface Data Unit）。OSI 模型把相邻层实体通过层间服务访问点依次交互信息的数据单元称为接口数据单元，并将（N）层的接口数据单元记为（N）IDU。（N）IDU 也由两部分组成。其中，一部分是（N+1）实体与（N）实体交互的数据，称为接口数据［记为（N）ID］；另一部分是为了协调（N+1）实体与（N）实体的交互操作而附加的控制信息（如服务原语中的某些参数），这些拉制信息称为接口控制信息［记为（N）ICI］。由于接口控制信息只在交互信息通过服务访问点时才起作用，所以，当接口数据单元通过服务访问点后就可以将其取掉。 PDU SDU IDU 三者关系 上课的时候龙崽想了一个比较恰当的比方，最开始的data(最初的SD)就是一块洋葱芯🧅，随着一层一层实体传递，没传递一层就给洋葱芯裹上一层洋葱皮(PCI)🧅，最后到第0层也就是物理层的时候就是一个洋葱🧅，然后通过物理管道，丢雷老母~🧅 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://humbledaddy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humbledaddy.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://humbledaddy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://humbledaddy.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}